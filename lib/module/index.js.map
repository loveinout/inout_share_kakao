{"version":3,"sources":["index.tsx"],"names":["NativeModules","KakaoShareLink","sendCommerce","commerceTemplate","callback","then","result","undefined","catch","error","sendList","listTemplate","sendFeed","feedTemplate","sendText","textTemplate","sendLocation","locationTemplate","sendCustom","customTemplate"],"mappings":"AAAA,SAASA,aAAT,QAA8B,cAA9B;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAqBD,aAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAyMA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,YAAY,GAAG,CAC1BC,gBAD0B,EAE1BC,QAF0B,KAGE;AAC5B,SAAOH,cAAc,CAACC,YAAf,CAA4BC,gBAA5B,EACJE,IADI,CACEC,MAAD,IAA4B;AAChC,QAAIF,QAAQ,IAAI,OAAOA,QAAP,KAAoB,UAApC,EAAgD;AAC9CA,MAAAA,QAAQ,CAACG,SAAD,EAAYD,MAAZ,CAAR;AACD;;AACD,WAAOA,MAAP;AACD,GANI,EAOJE,KAPI,CAOGC,KAAD,IAAkB;AACvB,QAAIL,QAAQ,IAAI,OAAOA,QAAP,KAAoB,UAApC,EAAgD;AAC9CA,MAAAA,QAAQ,CAACK,KAAD,EAAQF,SAAR,CAAR;AACD;;AACD,UAAME,KAAN;AACD,GAZI,CAAP;AAaD,CAjBM;AAkBP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,QAAQ,GAAG,CACtBC,YADsB,EAEtBP,QAFsB,KAGM;AAC5B,SAAOH,cAAc,CAACS,QAAf,CAAwBC,YAAxB,EACJN,IADI,CACEC,MAAD,IAA4B;AAChC,QAAIF,QAAQ,IAAI,OAAOA,QAAP,KAAoB,UAApC,EAAgD;AAC9CA,MAAAA,QAAQ,CAACG,SAAD,EAAYD,MAAZ,CAAR;AACD;;AACD,WAAOA,MAAP;AACD,GANI,EAOJE,KAPI,CAOGC,KAAD,IAAkB;AACvB,QAAIL,QAAQ,IAAI,OAAOA,QAAP,KAAoB,UAApC,EAAgD;AAC9CA,MAAAA,QAAQ,CAACK,KAAD,EAAQF,SAAR,CAAR;AACD;;AACD,UAAME,KAAN;AACD,GAZI,CAAP;AAaD,CAjBM;AAkBP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMG,QAAQ,GAAG,CACtBC,YADsB,EAEtBT,QAFsB,KAGM;AAC5B,SAAOH,cAAc,CAACW,QAAf,CAAwBC,YAAxB,EACJR,IADI,CACEC,MAAD,IAA4B;AAChC,QAAIF,QAAQ,IAAI,OAAOA,QAAP,KAAoB,UAApC,EAAgD;AAC9CA,MAAAA,QAAQ,CAACG,SAAD,EAAYD,MAAZ,CAAR;AACD;;AACD,WAAOA,MAAP;AACD,GANI,EAOJE,KAPI,CAOGC,KAAD,IAAkB;AACvB,QAAIL,QAAQ,IAAI,OAAOA,QAAP,KAAoB,UAApC,EAAgD;AAC9CA,MAAAA,QAAQ,CAACK,KAAD,EAAQF,SAAR,CAAR;AACD;;AACD,UAAME,KAAN;AACD,GAZI,CAAP;AAaD,CAjBM;AAkBP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMK,QAAQ,GAAG,CACtBC,YADsB,EAEtBX,QAFsB,KAGM;AAC5B,SAAOH,cAAc,CAACa,QAAf,CAAwBC,YAAxB,EACJV,IADI,CACEC,MAAD,IAA4B;AAChC,QAAIF,QAAQ,IAAI,OAAOA,QAAP,KAAoB,UAApC,EAAgD;AAC9CA,MAAAA,QAAQ,CAACG,SAAD,EAAYD,MAAZ,CAAR;AACD;;AACD,WAAOA,MAAP;AACD,GANI,EAOJE,KAPI,CAOGC,KAAD,IAAkB;AACvB,QAAIL,QAAQ,IAAI,OAAOA,QAAP,KAAoB,UAApC,EAAgD;AAC9CA,MAAAA,QAAQ,CAACK,KAAD,EAAQF,SAAR,CAAR;AACD;;AACD,UAAME,KAAN;AACD,GAZI,CAAP;AAaD,CAjBM;AAkBP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMO,YAAY,GAAG,CAC1BC,gBAD0B,EAE1Bb,QAF0B,KAGE;AAC5B,SAAOH,cAAc,CAACe,YAAf,CAA4BC,gBAA5B,EACJZ,IADI,CACEC,MAAD,IAA4B;AAChC,QAAIF,QAAQ,IAAI,OAAOA,QAAP,KAAoB,UAApC,EAAgD;AAC9CA,MAAAA,QAAQ,CAACG,SAAD,EAAYD,MAAZ,CAAR;AACD;;AACD,WAAOA,MAAP;AACD,GANI,EAOJE,KAPI,CAOGC,KAAD,IAAkB;AACvB,QAAIL,QAAQ,IAAI,OAAOA,QAAP,KAAoB,UAApC,EAAgD;AAC9CA,MAAAA,QAAQ,CAACK,KAAD,EAAQF,SAAR,CAAR;AACD;;AACD,UAAME,KAAN;AACD,GAZI,CAAP;AAaD,CAjBM;AAkBP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMS,UAAU,GAAG,CACxBC,cADwB,EAExBf,QAFwB,KAGI;AAC5B,SAAOH,cAAc,CAACiB,UAAf,CAA0BC,cAA1B,EACJd,IADI,CACEC,MAAD,IAA4B;AAChC,QAAIF,QAAQ,IAAI,OAAOA,QAAP,KAAoB,UAApC,EAAgD;AAC9CA,MAAAA,QAAQ,CAACG,SAAD,EAAYD,MAAZ,CAAR;AACD;;AACD,WAAOA,MAAP;AACD,GANI,EAOJE,KAPI,CAOGC,KAAD,IAAkB;AACvB,QAAIL,QAAQ,IAAI,OAAOA,QAAP,KAAoB,UAApC,EAAgD;AAC9CA,MAAAA,QAAQ,CAACK,KAAD,EAAQF,SAAR,CAAR;AACD;;AACD,UAAME,KAAN;AACD,GAZI,CAAP;AAaD,CAjBM;AA4BP,eAAeR,cAAf","sourcesContent":["import { NativeModules } from 'react-native';\nconst { KakaoShareLink } = NativeModules;\n\n/**\n * ContentType\n * @description 카카오 링크 본문 내용 타입\n * @property title        제목\n * @property imageUrl     이미지 url\n * @property link         클릭 시 열리는 링크\n * @property description  설명 (Option)\n * @property imageWidth   이미지 가로 길이 (Option)\n * @property imageHeight  이미지 세로 길이 (Option)\n */\nexport declare type ContentType = {\n  title: string;\n  imageUrl: string;\n  link: LinkType;\n  description?: string;\n  imageWidth?: number;\n  imageHeight?: number;\n};\n\n/**\n * ExecutionParamType\n * @description ios, android 딥링크에 사용될 key, value\n * @property key    딥링크 key\n * @property value  딥링크 value\n */\nexport declare type ExecutionParamType = {\n  key: string;\n  value: string;\n};\n\n/**\n * LinkType\n * @description 클릭 시 열리는 링크 타입 (이 중 하나는 반드시 존재해야 함)\n * @property webUrl                   웹 페이지 링크 (Option)\n * @property mobileWebUrl             모바일일 경우 웹 페이지 링크 (Option)\n * @property iosExecutionParams       ios 딥링크 (Option)\n * @property androidExecutionParams   android 딥링크 (Option)\n */\nexport declare type LinkType = {\n  webUrl?: string;\n  mobileWebUrl?: string;\n  iosExecutionParams?: ExecutionParamType[];\n  androidExecutionParams?: ExecutionParamType[];\n};\n\n/**\n * CommerceType\n * @description 상품 타입\n * @property regularPrice         정가\n * @property discountPrice        할인된 가격 (Option)\n * @property discountRate         할인율 (Option)\n * @property fixedDiscountPrice   정액 할인 가격 (Option)\n * @property productName          상품명 (Option)\n */\nexport declare type CommerceType = {\n  regularPrice: number;\n  discountPrice?: number;\n  discountRate?: number;\n  fixedDiscountPrice?: number;\n  productName?: string;\n};\n\n/**\n * ButtonType\n * @description 버튼 타입\n * @property title  버튼 타이틀\n * @property link   버튼 링크 타입\n */\nexport declare type ButtonType = {\n  title: string;\n  link: LinkType;\n};\n\n/**\n * SocialType\n * @description 소셜 타입\n * @property commentCount     댓글 수 (Option)\n * @property likeCount        좋아요 수 (Option)\n * @property sharedCount      공유 수 (Option)\n * @property subscriberCount  구독 수 (Option)\n * @property viewCount        조회 수 (Option)\n */\nexport declare type SocialType = {\n  commentCount?: number;\n  likeCount?: number;\n  sharedCount?: number;\n  subscriberCount?: number;\n  viewCount?: number;\n};\n\n/**\n * SendResultType\n * @description 공유 결과 타입\n * @property result   성공 여부\n * @property intent   카카오 링크 정보 (android only)\n * @property warning  경고 메세지 (android only)\n * @property argument 카카오 링크 argument (android only)\n * @property callback 카카오 링크 후 콜백 데이터 (android only)\n */\nexport declare type SendResultType = {\n  result: boolean;\n  intent?: string;\n  warning?: string;\n  argument?: string;\n  callback?: string;\n};\n\n/**\n * CallbackType\n * @description 카카오 링크 콜백 타입 (error, result 둘 중 하나만 존재)\n * @property error    에러\n * @property result   결과\n */\nexport declare type CallbackType = (\n  error?: Error,\n  result?: SendResultType\n) => void;\n\n/**\n * CommerceTemplateType\n * @description 상품 공유하기\n * @property content      내용\n * @property commerce     상품 정보\n * @property buttons      버튼 배열 (Option)\n * @property buttonTitle  버튼이 하나일 때 버튼의 타이틀 (Option)\n */\nexport declare type CommerceTemplateType = {\n  content: ContentType;\n  commerce: CommerceType;\n  buttons?: ButtonType[];\n  buttonTitle?: String;\n};\n\n/**\n * ListTemplateType\n * @description 리스트 공유하기\n * @property headerTitle  리스트 헤더 타이틀\n * @property headerLink   리스트 헤더 클릭 링크\n * @property contents     리스트 각각의 내용\n * @property buttons      버튼 배열 (Option)\n * @property buttonTitle  버튼이 하나일 때 버튼의 타이틀 (Option)\n */\nexport declare type ListTemplateType = {\n  headerTitle: string;\n  headerLink: LinkType;\n  contents: ContentType[];\n  buttons?: ButtonType[];\n  buttonTitle?: string;\n};\n\n/**\n * FeedTemplateType\n * @description 피드 공유하기\n * @property content      내용\n * @property social       피드 정보 (Option)\n * @property buttons      버튼 배열 (Option)\n * @property buttonTitle  버튼이 하나일 때 버튼의 타이틀 (Option)\n */\nexport declare type FeedTemplateType = {\n  content: ContentType;\n  social?: SocialType;\n  buttons?: ButtonType[];\n  buttonTitle?: String;\n};\n\n/**\n * LocationTemplateType\n * @description 위치 공유하기\n * @property address        상세 주소 (00구 00동 000-00)\n * @property addressTitle   주소 명칭 (00아파트, 00상가)\n * @property content        내용\n * @property social         피드 정보 (Option)\n * @property buttons        버튼 배열 (Option)\n * @property buttonTitle    버튼이 하나일 때 버튼의 타이틀 (Option)\n */\nexport declare type LocationTemplateType = {\n  address: string;\n  addressTitle?: string;\n  content: ContentType;\n  social?: SocialType;\n  buttons?: ButtonType[];\n  buttonTitle?: string;\n};\n\n/**\n * TextTemplateType\n * @description 텍스트 공유하기\n * @property text           텍스트\n * @property link           링크 타입\n * @property buttons        버튼 배열 (Option)\n * @property buttonTitle    버튼이 하나일 때 버튼의 타이틀 (Option)\n */\nexport declare type TextTemplateType = {\n  text: string;\n  link: LinkType;\n  buttons?: ButtonType[];\n  buttonTitle?: string;\n};\n\n/**\n * CustomTemplateType\n * @description 사용자가 미리 생성한 메시지 템플릿 공유하기\n * @property templateId   템플릿 id\n * @property templateArgs 템플릿 args (key, value 형식) (Option)\n */\nexport declare type CustomTemplateType = {\n  templateId: number;\n  templateArgs?: ExecutionParamType[];\n};\n\n/**\n * sendCommerce\n * @param {CommerceTemplateType} commerceTemplate CommerceTemplate Item\n * @param {CallbackType} [callback] callback function\n * @returns {Promise<SendResultType>}\n */\nexport const sendCommerce = (\n  commerceTemplate: CommerceTemplateType,\n  callback?: CallbackType\n): Promise<SendResultType> => {\n  return KakaoShareLink.sendCommerce(commerceTemplate)\n    .then((result: SendResultType) => {\n      if (callback && typeof callback === 'function') {\n        callback(undefined, result);\n      }\n      return result;\n    })\n    .catch((error: Error) => {\n      if (callback && typeof callback === 'function') {\n        callback(error, undefined);\n      }\n      throw error;\n    });\n};\n/**\n * sendList\n * @param {ListTemplateType} listTemplate ListTemplate Item\n * @param {CallbackType} [callback] callback function\n * @returns {Promise<SendResultType>}\n */\nexport const sendList = (\n  listTemplate: ListTemplateType,\n  callback?: CallbackType\n): Promise<SendResultType> => {\n  return KakaoShareLink.sendList(listTemplate)\n    .then((result: SendResultType) => {\n      if (callback && typeof callback === 'function') {\n        callback(undefined, result);\n      }\n      return result;\n    })\n    .catch((error: Error) => {\n      if (callback && typeof callback === 'function') {\n        callback(error, undefined);\n      }\n      throw error;\n    });\n};\n/**\n * sendFeed\n * @param {FeedTemplateType} feedTemplate FeedTemplate Item\n * @param {CallbackType} [callback] callback function\n * @returns {Promise<SendResultType>}\n */\nexport const sendFeed = (\n  feedTemplate: FeedTemplateType,\n  callback?: CallbackType\n): Promise<SendResultType> => {\n  return KakaoShareLink.sendFeed(feedTemplate)\n    .then((result: SendResultType) => {\n      if (callback && typeof callback === 'function') {\n        callback(undefined, result);\n      }\n      return result;\n    })\n    .catch((error: Error) => {\n      if (callback && typeof callback === 'function') {\n        callback(error, undefined);\n      }\n      throw error;\n    });\n};\n/**\n * sendText\n * @param {TextTemplateType} textTemplate TextTemplate Item\n * @param {CallbackType} [callback] callback function\n * @returns {Promise<SendResultType>}\n */\nexport const sendText = (\n  textTemplate: TextTemplateType,\n  callback?: CallbackType\n): Promise<SendResultType> => {\n  return KakaoShareLink.sendText(textTemplate)\n    .then((result: SendResultType) => {\n      if (callback && typeof callback === 'function') {\n        callback(undefined, result);\n      }\n      return result;\n    })\n    .catch((error: Error) => {\n      if (callback && typeof callback === 'function') {\n        callback(error, undefined);\n      }\n      throw error;\n    });\n};\n/**\n * sendLocation\n * @param {LocationTemplateType} locationTemplate LocationTemplate Item\n * @param {CallbackType} [callback] callback function\n * @returns {Promise<SendResultType>}\n */\nexport const sendLocation = (\n  locationTemplate: LocationTemplateType,\n  callback?: CallbackType\n): Promise<SendResultType> => {\n  return KakaoShareLink.sendLocation(locationTemplate)\n    .then((result: SendResultType) => {\n      if (callback && typeof callback === 'function') {\n        callback(undefined, result);\n      }\n      return result;\n    })\n    .catch((error: Error) => {\n      if (callback && typeof callback === 'function') {\n        callback(error, undefined);\n      }\n      throw error;\n    });\n};\n/**\n * sendCustom\n * @param {CustomTemplateType} customTemplate CustomTemplate Item\n * @param {CallbackType} [callback] callback function\n * @returns {Promise<SendResultType>}\n */\nexport const sendCustom = (\n  customTemplate: CustomTemplateType,\n  callback?: CallbackType\n): Promise<SendResultType> => {\n  return KakaoShareLink.sendCustom(customTemplate)\n    .then((result: SendResultType) => {\n      if (callback && typeof callback === 'function') {\n        callback(undefined, result);\n      }\n      return result;\n    })\n    .catch((error: Error) => {\n      if (callback && typeof callback === 'function') {\n        callback(error, undefined);\n      }\n      throw error;\n    });\n};\n\nexport declare type KakaoShareLinkType = {\n  sendCommerce: typeof sendCommerce;\n  sendList: typeof sendList;\n  sendFeed: typeof sendFeed;\n  sendText: typeof sendText;\n  sendLocation: typeof sendLocation;\n  sendCustom: typeof sendCustom;\n};\n\nexport default KakaoShareLink as KakaoShareLinkType;\n"]}